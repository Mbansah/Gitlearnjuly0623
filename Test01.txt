July 6: I am practicing how to use git

mkdir means create a folder on your computer
cd means make a particular follow your current directory
git status: A code to check the current status of your command environment

After creating a folder and making sure you are on the right path, you need to initialized git by using the " git init" command.

Next, you can use status to view the files in the current folder. After that use "git add filename" to add the test file to the command line interface (CLI).

At this point you are ready to post your file into the remote Github.

----------------------------
Problem and Solution:
----------------------------
If you add new changes to your file without committing them to the command line, those changes will not be automatically added to your remote repository  on Github. In order to avoid this problem, you need use the command "git add filename" after you make changes. This will add the new changes to the command line. After that you still need to use the code "git commit -m "a note explaining the new changes" " to commit the changes. When you do this, then you can easily push the new changes onto the remote repository.

The usual commands are:*******

git config --global user.username "Git username"
then git remote add origin https://github.com/M*******/Git**********.git 
(Not need for these two commands if you are already connected to the remote repository
next use "git push origin main"

Now, if you forget to committee new changes and you already pushed the txt file without the new changes then you have to go for document in the remote repository before you can update Github. You will encounter a problem you do not do so.

You can use the "git pull --all" command to download and automatically merge the two systems (local and Github file). When I tried this procedure, I encountered a problem. The  command was successful but I had to quit the terminal. I need to find out if there is any smooth way of getting out of this problem without actually quoting the terminal.

--------------------------------------------------------------------------------------
There are other options that I haven't tried.  Additional information on what to do can be found at https://www.freecodecamp.org/news/git-pull-remote-branch-how-to-fetch-remote-branches-in-git/.
------------------------------------------------------------

***Branching, Merging and version Control****

Learning how to branch and merge is quite challenging. The concept of version control is based on the notion that that there are times that you may be engaged in writing multiple codes for different project but you may have to leave those codes and work on a code that is urgent.  How do you go about this task without letting  people see all your codes. The version control feature allows you to do that. If you are currently working on three versions of a code, you can commit the three versions to what we called a "branch" . The purpose of a branch here is to help you work on some codes on a different environment and only bring it to the main platform when they are ready. 

To create a branch use the command "git branch branchname". Use can always use the command   
"git log --all --graph" to see your current working environment. The arrow points to your current space.

Use git add . and git commit -m "explanation" to add and commit different versions of the code.
Use "git checkout branchname (or master )" to switch between master and branches.
If you create a branch, the changes you make in that branch has no effect on the main branch. This is important because you don't want to push changes to the main page when the codes have not been tested to show that they are working.

Assuming you have code for your boss developed through the feature system, you can get it to the main page by creating a new file called "bugfix". This bug fix is a finished product that could come from the branch that you are working on.


Merging

what if you are done with working on a branch and you want to get the results back to the main page. You could merge all your codes from the branches to the main page. Where the merge results ends up depends on your current directory. There is no rule on where you want to put the merge results but it makes sense that the final copy of the code goes to the main branch.


merge codes : git merge branchname  -m " A message to explain the purpose" (this merges the branch to master). If you don't add the explanation, you will run into some difficulties.


Password challenges

I result it by following the instructions from Github. They provided a password and a configuration. Just follow it.

*****************************************************************************

2. Maven

Spend a considerable amount of time just figuring out how to install java. I was downloading the tar file instead of the simple dmg file. That was a nightmare.


Installing Maven using Hebrew

The following error pooped up. After reading it is confirmed that following the suggested option works. Ops.. my MacOS is old. I have to at least use Catalina. I like using the older versions!



Error: The following directories are not writable by your user:
/usr/local/share/man/man7

You should change the ownership of these directories to your user.
  sudo chown -R $(whoami) /usr/local/share/man/man7


"openjdk: This software does not run on macOS versions older than Catalina.
Error: maven: Unsatisfied requirements failed this build. "




brew install maven
brew install ...

Homebrew (website for brew install commands is very important and provide very easy way to install files.

Day 3 was tough!








